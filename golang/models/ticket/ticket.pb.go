// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: ticket.proto

package ticket

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TicketState int32

const (
	TicketState_AVAILABLE TicketState = 0
	TicketState_RESERVED  TicketState = 1
	TicketState_SOLD      TicketState = 2
)

// Enum value maps for TicketState.
var (
	TicketState_name = map[int32]string{
		0: "AVAILABLE",
		1: "RESERVED",
		2: "SOLD",
	}
	TicketState_value = map[string]int32{
		"AVAILABLE": 0,
		"RESERVED":  1,
		"SOLD":      2,
	}
)

func (x TicketState) Enum() *TicketState {
	p := new(TicketState)
	*p = x
	return p
}

func (x TicketState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TicketState) Descriptor() protoreflect.EnumDescriptor {
	return file_ticket_proto_enumTypes[0].Descriptor()
}

func (TicketState) Type() protoreflect.EnumType {
	return &file_ticket_proto_enumTypes[0]
}

func (x TicketState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TicketState.Descriptor instead.
func (TicketState) EnumDescriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{0}
}

type TicketHeaderState int32

const (
	TicketHeaderState_DRAFT  TicketHeaderState = 0
	TicketHeaderState_POSTED TicketHeaderState = 1
	TicketHeaderState_DONE   TicketHeaderState = 2
)

// Enum value maps for TicketHeaderState.
var (
	TicketHeaderState_name = map[int32]string{
		0: "DRAFT",
		1: "POSTED",
		2: "DONE",
	}
	TicketHeaderState_value = map[string]int32{
		"DRAFT":  0,
		"POSTED": 1,
		"DONE":   2,
	}
)

func (x TicketHeaderState) Enum() *TicketHeaderState {
	p := new(TicketHeaderState)
	*p = x
	return p
}

func (x TicketHeaderState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TicketHeaderState) Descriptor() protoreflect.EnumDescriptor {
	return file_ticket_proto_enumTypes[1].Descriptor()
}

func (TicketHeaderState) Type() protoreflect.EnumType {
	return &file_ticket_proto_enumTypes[1]
}

func (x TicketHeaderState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TicketHeaderState.Descriptor instead.
func (TicketHeaderState) EnumDescriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{1}
}

type Ticket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             uint64      `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CreatedAt      uint64      `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt      uint64      `protobuf:"varint,3,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Number         uint64      `protobuf:"varint,4,opt,name=Number,proto3" json:"Number,omitempty"`
	TicketHeaderID uint64      `protobuf:"varint,5,opt,name=TicketHeaderID,proto3" json:"TicketHeaderID,omitempty"`
	UserCode       string      `protobuf:"bytes,6,opt,name=UserCode,proto3" json:"UserCode,omitempty"`
	IsSpecialPrice bool        `protobuf:"varint,7,opt,name=IsSpecialPrice,proto3" json:"IsSpecialPrice,omitempty"`
	SpecialPrice   float32     `protobuf:"fixed32,8,opt,name=SpecialPrice,proto3" json:"SpecialPrice,omitempty"`
	State          TicketState `protobuf:"varint,9,opt,name=state,proto3,enum=TicketState" json:"state,omitempty"`
}

func (x *Ticket) Reset() {
	*x = Ticket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ticket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticket) ProtoMessage() {}

func (x *Ticket) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticket.ProtoReflect.Descriptor instead.
func (*Ticket) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{0}
}

func (x *Ticket) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Ticket) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Ticket) GetUpdatedAt() uint64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Ticket) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Ticket) GetTicketHeaderID() uint64 {
	if x != nil {
		return x.TicketHeaderID
	}
	return 0
}

func (x *Ticket) GetUserCode() string {
	if x != nil {
		return x.UserCode
	}
	return ""
}

func (x *Ticket) GetIsSpecialPrice() bool {
	if x != nil {
		return x.IsSpecialPrice
	}
	return false
}

func (x *Ticket) GetSpecialPrice() float32 {
	if x != nil {
		return x.SpecialPrice
	}
	return 0
}

func (x *Ticket) GetState() TicketState {
	if x != nil {
		return x.State
	}
	return TicketState_AVAILABLE
}

type TicketHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             uint64            `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name           string            `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description    string            `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	StartNum       uint64            `protobuf:"varint,4,opt,name=StartNum,proto3" json:"StartNum,omitempty"`
	EndNum         uint64            `protobuf:"varint,5,opt,name=EndNum,proto3" json:"EndNum,omitempty"`
	StartDate      uint64            `protobuf:"varint,6,opt,name=StartDate,proto3" json:"StartDate,omitempty"`
	EndDate        uint64            `protobuf:"varint,7,opt,name=EndDate,proto3" json:"EndDate,omitempty"`
	State          TicketHeaderState `protobuf:"varint,8,opt,name=State,proto3,enum=TicketHeaderState" json:"State,omitempty"`
	WinnerNum      uint64            `protobuf:"varint,9,opt,name=WinnerNum,proto3" json:"WinnerNum,omitempty"`
	AvailableCount uint64            `protobuf:"varint,10,opt,name=AvailableCount,proto3" json:"AvailableCount,omitempty"`
	ReservedCount  uint64            `protobuf:"varint,11,opt,name=ReservedCount,proto3" json:"ReservedCount,omitempty"`
	SoldCount      uint64            `protobuf:"varint,12,opt,name=SoldCount,proto3" json:"SoldCount,omitempty"`
	Price          float32           `protobuf:"fixed32,13,opt,name=Price,proto3" json:"Price,omitempty"`
	CreatedAt      uint64            `protobuf:"varint,14,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt      uint64            `protobuf:"varint,15,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	ErpUserID      uint64            `protobuf:"varint,16,opt,name=ErpUserID,proto3" json:"ErpUserID,omitempty"`
}

func (x *TicketHeader) Reset() {
	*x = TicketHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketHeader) ProtoMessage() {}

func (x *TicketHeader) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketHeader.ProtoReflect.Descriptor instead.
func (*TicketHeader) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{1}
}

func (x *TicketHeader) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *TicketHeader) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TicketHeader) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TicketHeader) GetStartNum() uint64 {
	if x != nil {
		return x.StartNum
	}
	return 0
}

func (x *TicketHeader) GetEndNum() uint64 {
	if x != nil {
		return x.EndNum
	}
	return 0
}

func (x *TicketHeader) GetStartDate() uint64 {
	if x != nil {
		return x.StartDate
	}
	return 0
}

func (x *TicketHeader) GetEndDate() uint64 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

func (x *TicketHeader) GetState() TicketHeaderState {
	if x != nil {
		return x.State
	}
	return TicketHeaderState_DRAFT
}

func (x *TicketHeader) GetWinnerNum() uint64 {
	if x != nil {
		return x.WinnerNum
	}
	return 0
}

func (x *TicketHeader) GetAvailableCount() uint64 {
	if x != nil {
		return x.AvailableCount
	}
	return 0
}

func (x *TicketHeader) GetReservedCount() uint64 {
	if x != nil {
		return x.ReservedCount
	}
	return 0
}

func (x *TicketHeader) GetSoldCount() uint64 {
	if x != nil {
		return x.SoldCount
	}
	return 0
}

func (x *TicketHeader) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TicketHeader) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TicketHeader) GetUpdatedAt() uint64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TicketHeader) GetErpUserID() uint64 {
	if x != nil {
		return x.ErpUserID
	}
	return 0
}

type HeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeaderID uint64 `protobuf:"varint,1,opt,name=HeaderID,proto3" json:"HeaderID,omitempty"`
}

func (x *HeaderRequest) Reset() {
	*x = HeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderRequest) ProtoMessage() {}

func (x *HeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderRequest.ProtoReflect.Descriptor instead.
func (*HeaderRequest) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{2}
}

func (x *HeaderRequest) GetHeaderID() uint64 {
	if x != nil {
		return x.HeaderID
	}
	return 0
}

type TicketReponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tickets []*Ticket `protobuf:"bytes,1,rep,name=Tickets,proto3" json:"Tickets,omitempty"`
}

func (x *TicketReponse) Reset() {
	*x = TicketReponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketReponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketReponse) ProtoMessage() {}

func (x *TicketReponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketReponse.ProtoReflect.Descriptor instead.
func (*TicketReponse) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{3}
}

func (x *TicketReponse) GetTickets() []*Ticket {
	if x != nil {
		return x.Tickets
	}
	return nil
}

var File_ticket_proto protoreflect.FileDescriptor

var file_ticket_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0,
	0x02, 0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a,
	0x0e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x49, 0x73, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0xe4, 0x03, 0x0a, 0x0c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x45, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x45, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x6f,
	0x6c, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x53,
	0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x45,
	0x72, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x2b, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0x32, 0x0a, 0x0d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x07, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2a, 0x34, 0x0a, 0x0b, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x56, 0x41, 0x49,
	0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4f, 0x4c, 0x44, 0x10, 0x02, 0x2a,
	0x34, 0x0a, 0x11, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x50, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44,
	0x4f, 0x4e, 0x45, 0x10, 0x02, 0x32, 0x73, 0x0a, 0x0d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x0e, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x77, 0x69, 0x6e, 0x6d, 0x67, 0x6d,
	0x67, 0x2f, 0x67, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ticket_proto_rawDescOnce sync.Once
	file_ticket_proto_rawDescData = file_ticket_proto_rawDesc
)

func file_ticket_proto_rawDescGZIP() []byte {
	file_ticket_proto_rawDescOnce.Do(func() {
		file_ticket_proto_rawDescData = protoimpl.X.CompressGZIP(file_ticket_proto_rawDescData)
	})
	return file_ticket_proto_rawDescData
}

var file_ticket_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ticket_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_ticket_proto_goTypes = []interface{}{
	(TicketState)(0),       // 0: TicketState
	(TicketHeaderState)(0), // 1: TicketHeaderState
	(*Ticket)(nil),         // 2: Ticket
	(*TicketHeader)(nil),   // 3: TicketHeader
	(*HeaderRequest)(nil),  // 4: HeaderRequest
	(*TicketReponse)(nil),  // 5: TicketReponse
}
var file_ticket_proto_depIdxs = []int32{
	0, // 0: Ticket.state:type_name -> TicketState
	1, // 1: TicketHeader.State:type_name -> TicketHeaderState
	2, // 2: TicketReponse.Tickets:type_name -> Ticket
	4, // 3: TicketService.GetTicketHeader:input_type -> HeaderRequest
	4, // 4: TicketService.GetTickets:input_type -> HeaderRequest
	3, // 5: TicketService.GetTicketHeader:output_type -> TicketHeader
	5, // 6: TicketService.GetTickets:output_type -> TicketReponse
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_ticket_proto_init() }
func file_ticket_proto_init() {
	if File_ticket_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ticket_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ticket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketReponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ticket_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ticket_proto_goTypes,
		DependencyIndexes: file_ticket_proto_depIdxs,
		EnumInfos:         file_ticket_proto_enumTypes,
		MessageInfos:      file_ticket_proto_msgTypes,
	}.Build()
	File_ticket_proto = out.File
	file_ticket_proto_rawDesc = nil
	file_ticket_proto_goTypes = nil
	file_ticket_proto_depIdxs = nil
}
